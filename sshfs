#!/bin/sh
# sshfs-dav is script that operates like sshfs but mounts files using webdav (rclone) over an ssh connection
# 2022, Don Mahurin, MIT License

lport=
rport=
portn=18800
foreground=
mount_args=
compression=no

if [ -z "$2" ]; then echo "usage: $0 [user@]host:[dir] mountpoint [-f] [-o OPTIONS]" ; exit 1 ; fi

for next in "$@" ''; do
	[ -z "$arg" ] || case "$arg" in
		-f) foreground=1;;
		-C) compression=yes ;;
		-L) lport="$next"; next= ;;
		-R) rport="$next"; next= ;;
		-P) portn="$next"; next= ;;
		-o) mount_args="-o $next"; next= ;;
		*)
			if [ -z "$hostpath" ] ; then hostpath="$arg"
			elif [ -z "$mountdir" ] ; then mountdir="$arg"
			else echo unknown option "$arg"; break
			fi
			;;
	esac
	arg="$next"
done

if [ -t 1 ]; then
	[ -n "$SSH_AGENT_PID" ] || eval "$(ssh-agent -s)" >/dev/null
	( ssh-add -l >/dev/null ) || ssh-add -q
	if [ -z "$foreground" ]; then
		( nohup "$0" "$@" </dev/null >/dev/null 2>&1 & )
		exit 0
	fi
fi

host="$(echo "$hostpath" | cut -d: -f1)"
hostpath="$(echo "$hostpath" | cut -d: -f2)"
[ -n "$hostpath" ] || hostpath=.
[ -d "$mountdir" ] || mkdir -p "$mountdir"

cleanup() {
	echo Interrupted
	umount "$mountdir"
	kill $(jobs -p) 2>/dev/null
	wait 2>/dev/null
}

trap 'cleanup' 2

[ -n "$lport" ] || lport="$(expr $portn + $(id -u | rev | cut -c -3 | rev))"
[ -n "$rport" ] || rport="$(expr $portn + 1 + $(ssh "$host" id -u | rev | cut -c -3 | rev))"

echo "starting webdav forwarded from local $lport to remote $rport"
ssh -tt -o "Compression $compression" -L "${lport}:localhost:${rport}" "$host" rclone serve webdav --quiet --addr "localhost:${rport}" "$hostpath" &
sleep 3

echo "mounting webdav"
mount_webdav=$(which mount_webdav)
mount_webdav_rclone() {
	conf="$(mktemp)"
	mount_args=
	if [ "$1" = "-o" ]; then
		shift
		for o in $(echo "$1" | tr ',' ' '); do case "$o" in
			ro) mount_args="$mount_args --read-only" ;;
		esac; done
		shift
	fi

	rclone --config="$conf" config create dav webdav url "$1" && rclone --config="$conf" mount dav: "$2" --daemon $mount_args
	sleep 2
	rm "$conf"
}
[ -n "$mount_webdav" ] || mount_webdav=mount_webdav_rclone
$mount_webdav $mount_args http://localhost:$lport/ "$mountdir"
echo "mounted to '$mountdir'"

echo "waiting for unmount"
while ( sleep 5 ) ; do
	( df | grep -q " $(realpath "$mountdir" || readlink -f "$mountdir" || (cd "$mountdir" ; pwd))"'$' ) || break
done
kill $(jobs -p) 2>/dev/null
wait 2>/dev/null
echo "unmounted '$mountdir'"
